name: Deploy to Hetzner

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup PHP
  #       uses: shivammathur/setup-php@v2
  #       with:
  #         php-version: '8.2'
  #         extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, gd, zip, redis

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '20'
  #         cache: 'yarn'

  #     - name: Install Composer dependencies
  #       run: composer install -q --no-ansi --no-interaction --no-scripts --no-progress --prefer-dist

  #     - name: Install Node.js dependencies
  #       run: yarn install --frozen-lockfile

  #     - name: Lint PHP files
  #       run: find . -type f -name "*.php" ! -path "*/vendor/*" -exec php -l {} \;

  #     - name: Run Pint
  #       run: vendor/bin/pint

  #     - name: Format Frontend
  #       run: yarn format

  #     - name: Lint Frontend
  #       run: yarn lint

  #     - name: Run tests
  #       run: |
  #         php artisan test
  #       env:
  #         DB_CONNECTION: sqlite
  #         DB_DATABASE: ":memory:"

  build-and-push:
    runs-on: ubuntu-latest
    # needs: [test]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check files before deployment
        run: |
          echo "Checking if docker-compose.prod.yml exists in repository:"
          ls -la docker-compose.prod.yml
          echo "Repository contents:"
          ls -la | head -20

      - name: Deploy to Hetzner
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HETZNER_HOST }}
          username: ${{ secrets.HETZNER_USER }}
          port: ${{ secrets.HETZNER_PORT }}
          key: ${{ secrets.HETZNER_SSH_KEY }}
          script: |
            # Set environment variables
            export APP_NAME="sachs-admin"
            export DEPLOY_PATH="/var/www/$APP_NAME"
            export BACKUP_PATH="/var/backups/$APP_NAME"
            export LOG_FILE="/var/log/$APP_NAME/deploy.log"
            export DOCKER_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            
            # Create log directory
            sudo mkdir -p /var/log/$APP_NAME
            sudo chown ${{ secrets.HETZNER_USER }}:${{ secrets.HETZNER_USER }} /var/log/$APP_NAME
            
            # Log deployment start
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Starting CI/CD deployment" | sudo tee -a $LOG_FILE
            
            # Create deployment directory if it doesn't exist
            sudo mkdir -p $DEPLOY_PATH
            sudo chown ${{ secrets.HETZNER_USER }}:${{ secrets.HETZNER_USER }} $DEPLOY_PATH
            
            # Create backup directory
            sudo mkdir -p $BACKUP_PATH
            sudo chown ${{ secrets.HETZNER_USER }}:${{ secrets.HETZNER_USER }} $BACKUP_PATH
            
            # Backup current deployment if it exists
            if [ -d "$DEPLOY_PATH/current" ]; then
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Creating backup of current deployment" | sudo tee -a $LOG_FILE
              BACKUP_NAME="backup-$(date +%Y%m%d-%H%M%S)"
              cp -r $DEPLOY_PATH/current $BACKUP_PATH/$BACKUP_NAME
              
              # Keep only last 5 backups
              cd $BACKUP_PATH
              ls -t | tail -n +6 | xargs -r rm -rf
            fi
            
            # Create new deployment directory
            DEPLOY_TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            NEW_DEPLOY_PATH="$DEPLOY_PATH/releases/$DEPLOY_TIMESTAMP"
            mkdir -p $NEW_DEPLOY_PATH
            
            # Copy application files
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Copying application files" | sudo tee -a $LOG_FILE
            cp -r . $NEW_DEPLOY_PATH/
            
            # Debug: List files in deployment directory
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Files in deployment directory:" | sudo tee -a $LOG_FILE
            ls -la $NEW_DEPLOY_PATH/ | sudo tee -a $LOG_FILE
            
            # Create Laravel directories if they don't exist
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Creating Laravel directories" | sudo tee -a $LOG_FILE
            mkdir -p $NEW_DEPLOY_PATH/storage/app/public
            mkdir -p $NEW_DEPLOY_PATH/storage/framework/cache
            mkdir -p $NEW_DEPLOY_PATH/storage/framework/sessions
            mkdir -p $NEW_DEPLOY_PATH/storage/framework/views
            mkdir -p $NEW_DEPLOY_PATH/storage/logs
            mkdir -p $NEW_DEPLOY_PATH/bootstrap/cache
            
            # Set proper permissions
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Setting file permissions" | sudo tee -a $LOG_FILE
            sudo chown -R www-data:www-data $NEW_DEPLOY_PATH/storage
            sudo chown -R www-data:www-data $NEW_DEPLOY_PATH/bootstrap/cache
            sudo chmod -R 755 $NEW_DEPLOY_PATH/storage
            sudo chmod -R 755 $NEW_DEPLOY_PATH/bootstrap/cache
            
            # Create .env file if it doesn't exist
            if [ ! -f "$NEW_DEPLOY_PATH/.env" ]; then
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Creating .env file" | sudo tee -a $LOG_FILE
              cat > $NEW_DEPLOY_PATH/.env << 'EOF'
            APP_NAME="Sachs Admin"
            APP_ENV=production
            APP_DEBUG=false
            APP_URL=https://admin.sachsevent.com
            
            LOG_CHANNEL=stack
            LOG_DEPRECATIONS_CHANNEL=null
            LOG_LEVEL=debug
            
            DB_CONNECTION=mysql
            DB_HOST=db
            DB_PORT=3306
            DB_DATABASE=sachs_admin
            DB_USERNAME=sachs_admin
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            
            BROADCAST_DRIVER=log
            CACHE_DRIVER=redis
            FILESYSTEM_DISK=local
            QUEUE_CONNECTION=redis
            SESSION_DRIVER=redis
            SESSION_LIFETIME=120
            
            REDIS_HOST=redis
            REDIS_PASSWORD=null
            REDIS_PORT=6379
            
            MAIL_MAILER=smtp
            MAIL_HOST=${{ secrets.MAIL_HOST }}
            MAIL_PORT=${{ secrets.MAIL_PORT }}
            MAIL_USERNAME=${{ secrets.MAIL_USERNAME }}
            MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
            MAIL_ENCRYPTION=tls
            MAIL_FROM_ADDRESS=${{ secrets.MAIL_FROM_ADDRESS }}
            MAIL_FROM_NAME="Sachs Admin"
            
            CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}
            SENTRY_LARAVEL_DSN=${{ secrets.SENTRY_LARAVEL_DSN }}
            AIRTABLE_API_KEY=${{ secrets.AIRTABLE_API_KEY }}
            AIRTABLE_BASE_ID=${{ secrets.AIRTABLE_BASE_ID }}
            EOF
            fi
            
            # Add Docker to PATH and check installation
            export PATH="/usr/bin:$PATH"
            
            # Check Docker installation
            if ! command -v docker &> /dev/null; then
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: Docker is not installed" | sudo tee -a $LOG_FILE
              exit 1
            fi
            
            # Check Docker Compose
            if ! docker compose version &> /dev/null; then
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: Docker Compose is not working" | sudo tee -a $LOG_FILE
              exit 1
            fi
            
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Docker version: $(docker --version)" | sudo tee -a $LOG_FILE
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Docker Compose version: $(docker compose version)" | sudo tee -a $LOG_FILE
            
            # Login to GitHub Container Registry
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Pulling latest Docker image" | sudo tee -a $LOG_FILE
            docker pull $DOCKER_IMAGE
            
            # Check if docker-compose.prod.yml exists
            cd $NEW_DEPLOY_PATH
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Checking for docker-compose.prod.yml in $(pwd)" | sudo tee -a $LOG_FILE
            ls -la docker-compose.prod.yml 2>/dev/null | sudo tee -a $LOG_FILE || echo "File not found" | sudo tee -a $LOG_FILE
            
            if [ ! -f "docker-compose.prod.yml" ]; then
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: docker-compose.prod.yml not found" | sudo tee -a $LOG_FILE
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Available files:" | sudo tee -a $LOG_FILE
              ls -la | sudo tee -a $LOG_FILE
              exit 1
            fi
            
            # Update docker-compose.prod.yml with latest image
            sed -i "s|image: .*|image: $DOCKER_IMAGE|g" docker-compose.prod.yml
            
            # Generate application key
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Generating application key" | sudo tee -a $LOG_FILE
            docker compose -f docker-compose.prod.yml run --rm app php artisan key:generate --no-interaction || true
            
            # Run database migrations
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Running database migrations" | sudo tee -a $LOG_FILE
            docker compose -f docker-compose.prod.yml run --rm app php artisan migrate --force
            
            # Clear and cache configuration
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Optimizing application" | sudo tee -a $LOG_FILE
            docker compose -f docker-compose.prod.yml run --rm app php artisan config:cache
            docker compose -f docker-compose.prod.yml run --rm app php artisan route:cache
            docker compose -f docker-compose.prod.yml run --rm app php artisan view:cache
            
            # Build and start containers
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Building and starting containers" | sudo tee -a $LOG_FILE
            docker compose -f docker-compose.prod.yml down --remove-orphans || true
            docker compose -f docker-compose.prod.yml up -d
            
            # Wait for services to be ready
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Waiting for services to be ready" | sudo tee -a $LOG_FILE
            sleep 30
            
            # Health check
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Performing health check" | sudo tee -a $LOG_FILE
            sleep 10  # Give containers more time to start
            
            # Try multiple health check endpoints
            HEALTH_CHECK_PASSED=false
            for i in {1..6}; do
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check attempt $i/6" | sudo tee -a $LOG_FILE
              
              # Check if containers are running
              if docker compose -f docker-compose.prod.yml ps | grep -q "Up"; then
                # Try health endpoint
                if curl -f http://localhost/up > /dev/null 2>&1; then
                  echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check passed" | sudo tee -a $LOG_FILE
                  HEALTH_CHECK_PASSED=true
                  break
                fi
                
                # Try main page as fallback
                if curl -f http://localhost/ > /dev/null 2>&1; then
                  echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check passed (main page accessible)" | sudo tee -a $LOG_FILE
                  HEALTH_CHECK_PASSED=true
                  break
                fi
              fi
              
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check failed, waiting 10 seconds..." | sudo tee -a $LOG_FILE
              sleep 10
            done
            
            if [ "$HEALTH_CHECK_PASSED" = false ]; then
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Container status:" | sudo tee -a $LOG_FILE
              docker compose -f docker-compose.prod.yml ps | sudo tee -a $LOG_FILE
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Container logs:" | sudo tee -a $LOG_FILE
              docker compose -f docker-compose.prod.yml logs --tail=50 | sudo tee -a $LOG_FILE
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check failed after 6 attempts" | sudo tee -a $LOG_FILE
              exit 1
            fi
            
            # Update current symlink
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Updating current symlink" | sudo tee -a $LOG_FILE
            rm -f $DEPLOY_PATH/current
            ln -s $NEW_DEPLOY_PATH $DEPLOY_PATH/current
            
            # Clean up old releases (keep last 5)
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Cleaning up old releases" | sudo tee -a $LOG_FILE
            cd $DEPLOY_PATH/releases
            ls -t | tail -n +6 | xargs -r rm -rf
            
            # Restart nginx if needed
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Restarting nginx" | sudo tee -a $LOG_FILE
            sudo systemctl restart nginx
            
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Deployment completed successfully!" | sudo tee -a $LOG_FILE
            
            # Show container status
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Container status:" | sudo tee -a $LOG_FILE
            docker compose -f $DEPLOY_PATH/current/docker-compose.prod.yml ps | sudo tee -a $LOG_FILE

 